name: Docker Image Build

on:
  push:
    branches:
      - main

  repository_dispatch:

  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: 'Enable debug mode'
        required: false
        default: false

env:
  IMAGE_REGISTRY: docker.pkg.github.com
  IMAGE_REPOSITORY: valuabletouch/thingsboard
  IMAGE_VERSION: build-${{ github.run_number }}
  THINGSBOARD_GIT_REPO: https://github.com/valuabletouch/thingsboard.git
  THINGSBOARD_GIT_BRANCH: master
  THINGSBOARD_VERSION: "3.7.0"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check current path
      run: pwd

    - name: Print Docker information
      run: docker info

    - name: Check disk spaces before clean up
      if: ${{ inputs.debug }}
      run: sudo df -hlT /

    - name: List 100 largest packages before clean up
      if: ${{ inputs.debug }}
      run: dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head -n 100

    - name: Ensure apt-fast is installed
      run: |
        sudo add-apt-repository ppa:apt-fast/stable
        sudo apt-get update
        sudo apt-get -y install apt-fast

    - name: Clean up build environment for additional disk space
      uses: rokibhasansagar/slimhub_actions@main
      with:
          retain: "docker_buildkit,java_tools"

    - name: List 100 largest packages after clean up
      if: ${{ inputs.debug }}
      run: dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head -n 100

    - name: Check disk spaces after clean up
      if: ${{ inputs.debug }}
      run: sudo df -hlT /

    - name: Ensure Node.js & Yarn are installed
      run: |
        set -ex

        # Download and install fnm:
        curl -o- https://fnm.vercel.app/install | bash

        # Load fnm into the current shell:
        source /home/runner/.bashrc

        # Download and install Node.js:
        fnm install 22

        # Verify the Node.js version:
        node -v

        # Download and install Yarn:
        corepack enable yarn

        # Verify Yarn version:
        yarn -v

    - name: Checkout files
      uses: actions/checkout@v2

    - name: Build 'ThingsBoard Base' Docker Image
      run: |
        docker build \
            --file Dockerfile.base \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/base:latest \
            .

    - name: Build 'ThingsBoard Build Intermadiate' Docker Image
      run: |
        docker build \
            --file Dockerfile.build \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/build:$IMAGE_VERSION \
            --build-arg THINGSBOARD_GIT_REPO=$THINGSBOARD_GIT_REPO \
            --build-arg THINGSBOARD_GIT_BRANCH=$THINGSBOARD_GIT_BRANCH \
            .

    - name: Build 'ThingsBoard Node Microservice' Docker Image
      run: |
        docker build \
            --file Dockerfile.node \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/node:latest \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/node:$IMAGE_VERSION \
            --build-arg IMAGE_REPOSITORY=$IMAGE_REGISTRY/$IMAGE_REPOSITORY \
            --build-arg IMAGE_VERSION=$IMAGE_VERSION \
            --build-arg THINGSBOARD_VERSION=$THINGSBOARD_VERSION \
            .

    - name: Build 'ThingsBoard COAP Transport Microservice' Docker Image
      run: |
        docker build \
            --file Dockerfile.coap-transport \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/coap-transport:latest \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/coap-transport:$IMAGE_VERSION \
            --build-arg IMAGE_REPOSITORY=$IMAGE_REGISTRY/$IMAGE_REPOSITORY \
            --build-arg IMAGE_VERSION=$IMAGE_VERSION \
            --build-arg THINGSBOARD_VERSION=$THINGSBOARD_VERSION \
            .

    - name: Build 'ThingsBoard HTTP Transport Microservice' Docker Image
      run: |
        docker build \
            --file Dockerfile.http-transport \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/http-transport:latest \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/http-transport:$IMAGE_VERSION \
            --build-arg IMAGE_REPOSITORY=$IMAGE_REGISTRY/$IMAGE_REPOSITORY \
            --build-arg IMAGE_VERSION=$IMAGE_VERSION \
            --build-arg THINGSBOARD_VERSION=$THINGSBOARD_VERSION \
            .

    - name: Build 'ThingsBoard MQTT Transport Microservice' Docker Image
      run: |
        docker build \
            --file Dockerfile.mqtt-transport \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/mqtt-transport:latest \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/mqtt-transport:$IMAGE_VERSION \
            --build-arg IMAGE_REPOSITORY=$IMAGE_REGISTRY/$IMAGE_REPOSITORY \
            --build-arg IMAGE_VERSION=$IMAGE_VERSION \
            --build-arg THINGSBOARD_VERSION=$THINGSBOARD_VERSION \
            .

    - name: Build 'ThingsBoard JavaScript Executor Microservice' Docker Image
      run: |
        docker build \
            --file Dockerfile.js-executor \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/js-executor:latest \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/js-executor:$IMAGE_VERSION \
            --build-arg IMAGE_REPOSITORY=$IMAGE_REGISTRY/$IMAGE_REPOSITORY \
            --build-arg IMAGE_VERSION=$IMAGE_VERSION \
            --build-arg THINGSBOARD_VERSION=$THINGSBOARD_VERSION \
            .

    - name: Build 'ThingsBoard Web UI Microservice' Docker Image
      run: |
        docker build \
            --file Dockerfile.web-ui \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/web-ui:latest \
            --tag $IMAGE_REGISTRY/$IMAGE_REPOSITORY/web-ui:$IMAGE_VERSION \
            --build-arg IMAGE_REPOSITORY=$IMAGE_REGISTRY/$IMAGE_REPOSITORY \
            --build-arg IMAGE_VERSION=$IMAGE_VERSION \
            --build-arg THINGSBOARD_VERSION=$THINGSBOARD_VERSION \
            .

    - name: Login to Docker Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.PUSH_PACKAGE_PAT }}

    - name: Push 'ThingsBoard Base' Image to Docker Registry (latest)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/base:latest

    - name: Push 'ThingsBoard Node Microservice' Image to Docker Registry (latest)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/node:latest

    - name: Push 'ThingsBoard Node Microservice' Image to Docker Registry (build)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/node:$IMAGE_VERSION

    - name: Push 'ThingsBoard COAP Transport Microservice' Image to Docker Registry (latest)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/coap-transport:latest

    - name: Push 'ThingsBoard COAP Transport Microservice' Image to Docker Registry (build)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/coap-transport:$IMAGE_VERSION

    - name: Push 'ThingsBoard HTTP Transport Microservice' Image to Docker Registry (latest)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/http-transport:latest

    - name: Push 'ThingsBoard HTTP Transport Microservice' Image to Docker Registry (build)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/http-transport:$IMAGE_VERSION

    - name: Push 'ThingsBoard MQTT Transport Microservice' Image to Docker Registry (latest)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/mqtt-transport:latest

    - name: Push 'ThingsBoard MQTT Transport Microservice' Image to Docker Registry (build)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/mqtt-transport:$IMAGE_VERSION

    - name: Push 'ThingsBoard JavaScript Executor Microservice' Image to Docker Registry (latest)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/js-executor:latest

    - name: Push 'ThingsBoard JavaScript Executor Microservice' Image to Docker Registry (build)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/js-executor:$IMAGE_VERSION

    - name: Push 'ThingsBoard Web UI Microservice' Image to Docker Registry (latest)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/web-ui:latest

    - name: Push 'ThingsBoard Web UI Microservice' Image to Docker Registry (build)
      run: docker push $IMAGE_REGISTRY/$IMAGE_REPOSITORY/web-ui:$IMAGE_VERSION

    - name: Trigger Webhook
      run: |
        curl \
          --location \
          --request POST '${{ secrets.BUILD_WEBHOOK_URL }}' \
          --header 'Authorization: ${{ secrets.BUILD_WEBHOOK_AUTHORIZATION }}' \
          --header 'Content-Type: application/json' \
          --data-raw '{"variables":{"ThingsBoard.ImageTag":{"isSecret":false,"value":"${{ env.IMAGE_VERSION }}"}}}'

    - name: Check disk spaces after build
      if: ${{ inputs.debug && !cancelled() }}
      run: sudo df -h